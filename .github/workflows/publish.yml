name: Publish
on:
  issues:
    types: [labeled]
jobs:
  publish:
    runs-on: ubuntu-latest
    name: "Publish a new version"
    if: github.event.label.name == 'accepted'
    steps:
      - name: "Parse and set inputs"
        id: inputs
        uses: actions/github-script@v3
        with:
          script: |
            const titleParser = /^publish: (?:getsentry\/)?(?<repo>[^/@]+)(?<path>\/[\w./_-]+)?@(?<version>[\w.]+)$/;
            const titleMatch = context.payload.issue.title.match(titleParser).groups;
            const dry_run = context.payload.issue.labels.some(l => l.name === 'dry-run') ? '1' : '';
            const path = '.' + (titleMatch.path || '');
            return {...titleMatch, path, dry_run};
      - name: "Inform start"
        if: steps.inputs.outcome == 'success'
        uses: actions/github-script@v3
        with:
          script: |
            const repoInfo = context.repo;
            const workflowInfo = (await github.actions.getWorkflowRun({
              ...repoInfo,
              run_id: context.runId,
            })).data;
            await github.issues.createComment({
              ...repoInfo,
              issue_number: context.payload.issue.number,
              body: `Publishing: [run#${context.runId}](${workflowInfo.html_url})`,
            });

      - uses: actions/checkout@v2
        name: Check out target repo
        if: ${{ steps.inputs.outputs.result }}
        with:
          path: "__github_repo__"
          repository: getsentry/${{ fromJSON(steps.inputs.outputs.result).repo }}
          token: ${{ secrets.GH_SENTRY_BOT_PAT }}
          fetch-depth: 0

      - name: Set working directory
        shell: bash
        run: |
          shopt -s dotglob
          mv __github_repo__/${{ fromJSON(steps.inputs.outputs.result).path }}/** .
          rm -rf __github_repo__

      - uses: getsentry/craft@master
        name: Publish using Craft
        with:
          action: publish
          version: ${{ fromJSON(steps.inputs.outputs.result).version }}
        env:
          DRY_RUN: ${{ fromJSON(steps.inputs.outputs.result).dry_run }}
          GIT_COMMITTER_NAME: getsentry-bot
          GIT_AUTHOR_NAME: getsentry-bot
          EMAIL: bot@getsentry.com
          GITHUB_API_TOKEN: ${{ secrets.GH_SENTRY_BOT_PAT }}
          # TODO(byk): Drop ZEUS_API_TOKEN when all repos use GitHub Artifacts
          ZEUS_API_TOKEN: ${{ secrets.ZEUS_API_TOKEN }}
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
          CRAFT_GCS_TARGET_CREDS_JSON: ${{ secrets.CRAFT_GCS_TARGET_CREDS_JSON }}
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
          DOCKER_USERNAME: "sentrybuilder"
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Inform about failure
        if: ${{ failure() }}
        uses: actions/github-script@v3
        with:
          script: |
            const repoInfo = context.repo;
            const workflowInfo = (await github.actions.getWorkflowRun({
              ...repoInfo,
              run_id: context.runId,
            })).data;
            await github.issues.createComment({
              ...repoInfo,
              issue_number: context.payload.issue.number,
              body: `Failed to publish: [run#${context.runId}](${workflowInfo.html_url})`,
            });

      - name: Close on success
        if: ${{ success() }}
        uses: actions/github-script@v3
        with:
          script: |
            const repoInfo = context.repo;
            const workflowInfo = (await github.actions.getWorkflowRun({
              ...repoInfo,
              run_id: context.runId,
            })).data;
            await github.issues.createComment({
              ...repoInfo,
              issue_number: context.payload.issue.number,
              body: `Published successfully: [run#${context.runId}](${workflowInfo.html_url})`,
            });
            await github.issues.update({
              ...repoInfo,
              issue_number: context.payload.issue.number,
              state: 'closed'
            });
